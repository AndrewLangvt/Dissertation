#! /usr/bin/env python3 

# matrixGeneiase_parser.py
# Andrew S. Lang
# Created: 17FEB2019
# Last Modified: 18FEB2019

import sys
import re
import argparse
from argparse import RawDescriptionHelpFormatter
import os
import csv

parser = argparse.ArgumentParser(
    epilog='''This script parses a matrix of SampleIDs by Entrez gene IDs with cells containing
P-values for ASE of each gene in a given sample. Output will contain counts of genes showing ASE
within each sex, tissue, treatment type and all combinations of these.

A second output file will also be generated named from the string provided with the -o flag, and 
"_CountsPerSamp.tsv" appended to this string (Default = Parsed_GeneiASE_matrix_CountsPerSamp.tsv). This 
file contains a two-column file with sample and corresponding total counts of ASE identified.''', formatter_class= RawDescriptionHelpFormatter)

parser._action_groups.pop()
required = parser.add_argument_group('Required Arguments')    
required.add_argument('-f', '--Matrix_file', help='Matrix file generated by geneiase_matrix.py', required=True)
required.add_argument('-a', '--Annotation', help='Annotation File Name (Anotation file from annotation_file.py)', required=True)
optional = parser.add_argument_group('Optional Arugments')    
optional.add_argument('-o', '--Output', help='Output file name (Default = Parsed_GeneiASE_matrix.tsv)', default='Parsed_GeneiASE_matrix.tsv')
optional.add_argument('-t', '--Out_type', help='Output file type: "raw" or "norm" (Default = raw)', default='raw')


# Generating list of all pairwise comparisons
sexes = ['male', 'female']
tissues = ['hypothalamus', 'pituitary', 'gonad']
treatments = ['bldg', 'control', 'extend', 'extend-hatch', 'hatch', 'inc-d17', 'inc-d3', 
              'inc-d9', 'inc-prolong', 'lay', 'm-hatch', 'm-inc-d17', 'm-inc-d3', 'm-inc-d8', 'm-inc-d9', 
              'm-n2', 'n5', 'n9', 'prolong']
states = []

for sex in sexes:                                         # adding each sex, and all sex-tissue combiations
    states.append('{},'.format(sex))
    for tissue in tissues:
        sex_tiss = '{}_{},'.format(sex, tissue)
        states.append(sex_tiss)
for tissue in tissues:                                    # adding each tissue, and all tissue-treatment combinations
    states.append('{},'.format(tissue))
    for tx in treatments:
        tiss_tx = '{}_{},'.format(tissue, tx)
        states.append(tiss_tx)
for sex in sexes:                                         # adding all sex-tissue-treatment combiations
    for tissue in tissues:
        for tx in treatments:
            state = '{}_{}_{},'.format(sex, tissue, tx)
            states.append(state)
for sex in sexes:
    for tx in treatments:
        state = '{},{}'.format(sex, tx)                   # Here, sex and tissue are separated with a ',' following, as I need to split on a substring
        states.append(state)                              # to ultimately search for 'sex.*_tissue' later on. All other patterns have ',' appended 
for tx in treatments:                                     # to the end, enabling me to still split on the comma.
    states.append('{},'.format(tx))

    
def total_genes(matrix_file):                             # Generating a list and dictionary containing all gene IDs. Dictionary for parsing, list to retain order
    file = open(matrix_file, 'r')
    gene_sampleASE_dict = {}
    all_gene_list = []                                    # Gene list to maintain order of Genes (shouldn't be an issue, as it's already sorted. but just in case)
    line = file.readlines()[0]                            # Also having this generate a geneID[sampleID] dictionary from header line
    if line.startswith('SampleID'):
        columns = line.rstrip().split('\t')[1:]
        for col in columns:
            gene = col
            gene_sampleASE_dict[gene] = []
            all_gene_list.append(gene)
    return (gene_sampleASE_dict, all_gene_list)


def geneLocation_dict(Annotation_file):                   # Generating an annotation dictionary from annotation file
    anno = open(Annotation_file, 'r')
    anno_dict = {}
    for line in anno.readlines()[1:]:                     # Skipping header line 
        columns = line.rstrip().split('\t')
        contig = columns[0]
        gStart = str(columns[1])
        gEnd = str(columns[2])
        gName = columns[3]
        bounds = [gStart, gEnd]
        boundaries = ':'.join(bounds)
        ctig_bdrs = [contig, boundaries]
        loc = '_'.join(ctig_bdrs)                         # Ultimately adding Contig_start:stop as the value for each gene (key)

        if contig not in anno_dict.keys():                # Generating new dictionary entry for gene if not already present,
            anno_dict[gName] = loc                        # otherwise printing error message as there should only be one entry per gene
        else:
            print('ERROR: Duplicate gene entries in Annotation file!')
            break
    anno.close()
    return(anno_dict)

def total_counts(matrix, anno_file, outfile_name, out_type):# Counting total ASE per gene, per pattern. Will allow me to visualize in R                                                            
    file = open(matrix, 'r')
    counts_per_samp = 'Sample\tTotalCounts\n'             # This string will have total ASE counts for each sample. (Violin plots in R)
    totals = total_genes(matrix)

    gene_sampleASE_dict = totals[0]                       # Currently empty dictionary, contains all genes as keys
    all_gene_list = totals[1]                             # List of all genes in matrix file, enables me to keep same gene order as matrix
    all_sample_list = []

    for line in file:                                     # Counting ASE per sample. Also counting all paterns showing ASE of each gene.  
        if line.startswith('SampleID'):
            continue
        else:
            sampleID = line.split('\t')[0]
            columns = line.rstrip().split('\t')[1:]
            all_sample_list.append(sampleID)              # Generating list of all samples in dataset, from which I will count frequency 
            ASE_count = 0                                 # of each pattern to normalize raw counts
            col_num = 0
            if len(columns) != len(all_gene_list):        # Confirming my gene list is the same length as the file being read
                print('ERROR: Gene columns do not match up with pvalue columns!')
            colnum = 0
            while colnum < len(columns):
                pvalue = float(columns[colnum])
                if pvalue < 0.05:
                    ASE_count += 1                        # ASE counts for current sample
                    current_gene = all_gene_list[colnum] 
                    gene_sampleASE_dict[current_gene].append(sampleID) # Dictionary of ASE at a given gene == gene:[sample1, sample4, etc.]
                colnum += 1
            counts_per_samp += '{}\t{}\n'.format(sampleID, ASE_count)  # Adding counts of ASE for current sample to output string

    sample_type_counts = {}                               # Counting all instances of a given pattern in my dataset and storing as a dictionary 
                                                          # containing SampleType: counts (total abundances of each pattern in my sample list)
    for state in states:                             
        attributes = state.split(',')
        split_atts = ['_', attributes[0], '.*_', attributes[1]]
        pattern = ''.join(split_atts).rstrip('_')         # Removing trailing '_' as this poses issue when at the end of treatments
        sample_type_counts[state] = 0                     # (i.e. 'm-inc-d9_.*' will not match anything
        for sample in all_sample_list:
            regex = re.compile(pattern)
            if re.findall(regex, sample):
                sample_type_counts[state] += 1

    comparison_counts = {}                                # Counting instances of a given pattern in the dictionary containing lists of samples
    for gene in gene_sampleASE_dict.keys():               # showing ASE at a given gene locus. (i.e. how many times does 'female' exist in
        comparison_counts[gene] = []                      # the list of samples showing ASE for gene 1?

        for state in states:                              
            attributes = state.split(',')
            split_atts = ['_', attributes[0], '.*_', attributes[1]]
            pattern = ''.join(split_atts)
            sample_list = gene_sampleASE_dict[gene]
            total_count = 0
            for sample in sample_list:
                regex = re.compile(pattern)
                if re.findall(regex, sample):
                    total_count += 1
            if out_type == 'raw':                         # Depending upon user input, will either output RAW or NORMALIZED count data
                comparison_counts[gene].append(total_count)
            elif out_type == 'norm':
                sample_total = sample_type_counts[state]
                if sample_total == 0:                     # For the instances that the pattern does not exist in my dataset, setting the 
                    norm_count = 0                        # output value to 0. This aspect was really only necessary for intital development
                else:                                     # of this script with a subset of the dataset. 
                    norm_count = total_count/sample_total
                comparison_counts[gene].append(norm_count)
        
    with open(outfile_name, 'w') as outfile:              # Writing parsed matrix file, where cell values are now either raw or normalized counts
        tsv_writer = csv.writer(outfile, delimiter='\t', lineterminator = '\n')
        header_lst = []
        for state in states:
            header_lst.append(state.rstrip(','))          # Header will be the comparisons, though with trailing ',' removed 
        header = ['GeneID'] + header_lst + ['Location']
        tsv_writer.writerow(header)

        annotation = geneLocation_dict(anno_file)         # Adding chromosomal location information back into this file
        for gene, count_list in comparison_counts.items():
            loci = annotation[gene]
            entry = [gene] + count_list + [loci]
            tsv_writer.writerow(entry)
    outfile.close()
                                                          # Writing TSV containing sample and total ASE counts
    outfile_name2 = re.sub('.tsv', '_CountsPerSamp.tsv', outfile_name)
    with open(outfile_name2, 'w') as outfile2:
        outfile2.write(counts_per_samp)
    outfile2.close()

args = parser.parse_args()

print()
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
print('matrixGeneiase_parser.py is running')
print()
print('Program Parameters')
print('INPUT MATRIX FILE   = {}'.format(args.Matrix_file))
print('ANNOTATION FILE     = {}'.format(args.Annotation))
print('OUTPUT FILE NAME    = {}'.format(args.Output))
print('OUTFILE TYPE        = {}'.format(args.Out_type))
print()
print('Parsing matrix file.')
total_counts(args.Matrix_file, args.Annotation, args.Output, args.Out_type)
print('matrixGeneiase_parser.py processing is complete.')
print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
print()
